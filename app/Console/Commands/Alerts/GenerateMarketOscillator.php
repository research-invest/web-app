<?php
/**
 * php artisan market:oscillator
 */
namespace App\Console\Commands\Alerts;

use App\Models\Trade;
use App\Services\ChartGenerator;
use App\Services\TelegramService;
use Carbon\Carbon;
use Illuminate\Console\Command;

class GenerateMarketOscillator extends Command
{
    protected $signature = 'market:oscillator';
    protected $description = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–Ω–≥ –∏ —à–æ—Ä—Ç —Å–¥–µ–ª–æ–∫';

    private TelegramService $telegram;
    private ChartGenerator $chartGenerator;
    private const LONG_TRADE_ID = 'LONG_TRADE_ID';
    private const SHORT_TRADE_ID = 'SHORT_TRADE_ID';

    public function __construct(TelegramService $telegram, ChartGenerator $chartGenerator)
    {
        parent::__construct();
        $this->telegram = $telegram;
        $this->chartGenerator = $chartGenerator;
    }

    public function handle()
    {
        /**
         * @var $longTrade Trade
         * @var $shortTrade Trade
         */
        $longTrade = Trade::find(env(self::LONG_TRADE_ID));
        $shortTrade = Trade::find(env(self::SHORT_TRADE_ID));

        if (!$longTrade || !$shortTrade) {
            $this->error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é PNL –¥–ª—è –æ–±–µ–∏—Ö —Å–¥–µ–ª–æ–∫
        $longHistory = $longTrade->pnlHistory()->orderBy('created_at')->limit(20)->get();
        $shortHistory = $shortTrade->pnlHistory()->orderBy('created_at')->limit(20)->get();

        if ($longHistory->isEmpty() || $shortHistory->isEmpty()) {
            $this->error('–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ PNL –¥–ª—è –æ–¥–Ω–æ–π –∏–ª–∏ –æ–±–µ–∏—Ö —Å–¥–µ–ª–æ–∫');
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        $chartData = [];
        $timestamps = [];

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        foreach ($longHistory as $record) {
            $timestamps[$record->created_at->timestamp] = $record->created_at;
        }
        foreach ($shortHistory as $record) {
            $timestamps[$record->created_at->timestamp] = $record->created_at;
        }
        ksort($timestamps);

        // –î–ª—è –∫–∞–∂–¥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
        foreach ($timestamps as $timestamp => $date) {
            $longPnl = $longHistory->where('created_at', $date)->first()?->unrealized_pnl ?? 0;
            $shortPnl = $shortHistory->where('created_at', $date)->first()?->unrealized_pnl ?? 0;

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º PNL –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É -100 –¥–æ 100
            $maxPnl = max(abs($longPnl), abs($shortPnl));
            if ($maxPnl == 0) {
                $oscillator = 0;
            } else {
                $longNormalized = ($longPnl / $maxPnl) * 100;
                $shortNormalized = ($shortPnl / $maxPnl) * 100;
                $oscillator = $longNormalized - $shortNormalized;
            }

            $chartData[] = [
                'timestamp' => $date->format('Y-m-d H:i:s'),
                'score' => round($oscillator, 2)
            ];
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        $chartImage = $this->chartGenerator->generateIndexChart($chartData);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $currentOscillator = end($chartData)['score'];
        $message = "üìä <b>–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä —Ä—ã–Ω–∫–∞: {$currentOscillator}</b>\n\n";

        if ($currentOscillator > 0) {
            $message .= "üü¢ –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—è";
        } elseif ($currentOscillator < 0) {
            $message .= "üî¥ –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—è";
        } else {
            $message .= "‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ";
        }

        $this->telegram->sendPhoto($chartImage, $message, '-1002321524146');
        $this->info('–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
}
