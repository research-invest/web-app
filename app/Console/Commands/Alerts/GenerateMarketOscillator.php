<?php
/**
 * php artisan market:oscillator
 */
namespace App\Console\Commands\Alerts;

use App\Models\Trade;
use App\Services\Analyze\MarketOscillator;
use App\Services\ChartGenerator;
use App\Services\TelegramService;
use Carbon\Carbon;
use Illuminate\Console\Command;

class GenerateMarketOscillator extends Command
{
    protected $signature = 'market:oscillator';
    protected $description = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–Ω–≥ –∏ —à–æ—Ä—Ç —Å–¥–µ–ª–æ–∫';

    private TelegramService $telegram;
    private ChartGenerator $chartGenerator;
    private const string LONG_TRADE_ID = 'LONG_TRADE_ID';
    private const string SHORT_TRADE_ID = 'SHORT_TRADE_ID';
    private const int LIMIT = 5;

    public function __construct(TelegramService $telegram, ChartGenerator $chartGenerator)
    {
        parent::__construct();
        $this->telegram = $telegram;
        $this->chartGenerator = $chartGenerator;
    }

    public function handle()
    {
        /**
         * @var $longTrade Trade
         * @var $shortTrade Trade
         */
        $longTrade = Trade::find(env(self::LONG_TRADE_ID));
        $shortTrade = Trade::find(env(self::SHORT_TRADE_ID));

        if (!$longTrade || !$shortTrade) {
            $this->error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é PNL –¥–ª—è –æ–±–µ–∏—Ö —Å–¥–µ–ª–æ–∫
        $longHistory = $longTrade->pnlHistory()->latest()->limit(self::LIMIT)->get()->sortBy('created_at')->values();
        $shortHistory = $shortTrade->pnlHistory()->latest()->limit(self::LIMIT)->get()->sortBy('created_at')->values();

        if ($longHistory->isEmpty() || $shortHistory->isEmpty()) {
            $this->error('–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ PNL –¥–ª—è –æ–¥–Ω–æ–π –∏–ª–∏ –æ–±–µ–∏—Ö —Å–¥–µ–ª–æ–∫');
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        $chartData = [];
        $timestamps = [];

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        foreach ($longHistory as $record) {
            $timestamps[$record->created_at->timestamp] = $record->created_at;
        }
        foreach ($shortHistory as $record) {
            $timestamps[$record->created_at->timestamp] = $record->created_at;
        }
        ksort($timestamps);

        // –î–ª—è –∫–∞–∂–¥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä
        $lastLongPnl = 0;
        $lastShortPnl = 0;
        foreach ($timestamps as $timestamp => $date) {
            $longPnl = $longHistory->where('created_at', '<=', $date)->last()?->unrealized_pnl ?? $lastLongPnl;
            $shortPnl = $shortHistory->where('created_at', '<=', $date)->last()?->unrealized_pnl ?? $lastShortPnl;
            $lastLongPnl = $longPnl;
            $lastShortPnl = $shortPnl;

            $maxPnl = max(abs($longPnl), abs($shortPnl), 1); // —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
            $oscillator = (($longPnl - $shortPnl) / $maxPnl) * 100;

            $chartData[] = [
                'timestamp' => $date->format('Y-m-d H:i:s'),
                'long' => round($longPnl, 2),
                'short' => round($shortPnl, 2),
                'score' => round($oscillator, 2)
            ];
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        $chartImage = $this->chartGenerator->generateLongShortJpGraph($chartData, '');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–∞–π–ª
//        $filename = storage_path('app/public/oscillator_' . date('Y-m-d_H-i-s') . '.png');
//        file_put_contents($filename, $chartImage);
//
//        $this->info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {$filename}");
//        return;

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        $oscillator = new MarketOscillator();
        $longPnl = $longHistory->pluck('unrealized_pnl')->toArray();
        $shortPnl = $shortHistory->pluck('unrealized_pnl')->toArray();

        $longVolumes = $longHistory->pluck('volume')->toArray();
        $btcVolumes = $shortHistory->pluck('volume_btc')->toArray();
        $ethVolumes = $shortHistory->pluck('volume_eth')->toArray();

        $analysis = $oscillator->analyze($longPnl, $shortPnl, $longVolumes, $btcVolumes, $ethVolumes);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $currentOscillator = end($chartData)['score'];
        $message = sprintf(
            "üìä <b>–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä: %d%%</b> %s\n",
            $currentOscillator,
            $currentOscillator > 0 ? "üü¢" : ($currentOscillator < 0 ? "üî¥" : "‚ö™")
        );

        $message .= $this->formatAnalysisMessage($analysis);

//        $this->telegram->sendMessage($message);
//        dd($message);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if ($this->telegram->sendPhoto($message, $chartImage)) {
            $this->info('–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
//            unlink($filename); // —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        } else {
            $this->error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞');
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram —Å –∞–Ω–∞–ª–∏–∑–æ–º
     */
    private function formatAnalysisMessage(array $analysis): string
    {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        $message = "üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞</b>\n\n";

        // –¢—Ä–µ–Ω–¥ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (–æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        $message .= sprintf(
            "üéØ <b>–¢—Ä–µ–Ω–¥:</b> %+.1f%% %s\n",
            $analysis['market_trend'],
            $analysis['market_trend'] > 0 ? "üìà" : "üìâ"
        );

        // –°–∏–ª–∞ –ø–æ–∑–∏—Ü–∏–π (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        $message .= sprintf(
            "üí™ <b>LONG/SHORT:</b> %+.1f%%/%+.1f%% %s\n",
            $analysis['long_strength'],
            $analysis['short_strength'],
            $analysis['long_strength'] > abs($analysis['short_strength']) ? "üü¢" : "üî¥"
        );

        // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        $message .= sprintf(
            "üîÑ <b>–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è:</b> %.1f%% %s\n",
            $analysis['correlation'],
            $analysis['correlation'] > 80 ? "‚ö°" : ($analysis['correlation'] < -80 ? "‚ö†Ô∏è" : "‚ûñ")
        );

        // –û–±—ä–µ–º—ã –∏ –∏—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        $message .= "\nüìä <b>–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:</b>\n";

        // –û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –æ–±—ä–µ–º–æ–≤
        $message .= sprintf(
            "üìà –¢—Ä–µ–Ω–¥: %+.1f%% %s\n",
            $analysis['weighted_volume_trend'],
            abs($analysis['weighted_volume_trend']) > 50 ?
                ($analysis['weighted_volume_trend'] > 0 ? "üî•" : "‚ùÑÔ∏è") : "‚ûñ"
        );

        // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ–±—ä–µ–º–æ–≤ (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        $volCorr = $analysis['volume_correlations'];
        $message .= sprintf(
            "BTC: %.1f%% | ETH: %.1f%%\n",
            $volCorr['asset_btc'],
            $volCorr['asset_eth']
        );

        // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω—ã –∏ –æ–±—ä–µ–º–∞
        $priceVolCorr = $analysis['price_volume_correlations'];
        if (abs($priceVolCorr['long']) > 20 || abs($priceVolCorr['short']) > 20) {
            $message .= sprintf(
                "üìä –¶–µ–Ω–∞/–û–±—ä–µ–º: L%.1f%% | S%.1f%%\n",
                $priceVolCorr['long'],
                $priceVolCorr['short']
            );
        }

        // –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
        $message .= "\nüìù <b>–í—ã–≤–æ–¥:</b> ";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
        if (abs($analysis['market_trend']) > 50) {
            $message .= $analysis['market_trend'] > 0
                ? "–°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥"
                : "–°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥";
        } elseif (abs($analysis['market_trend']) > 20) {
            $message .= $analysis['market_trend'] > 0
                ? "–£–º–µ—Ä–µ–Ω–Ω—ã–π –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥"
                : "–£–º–µ—Ä–µ–Ω–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥";
        } else {
            $message .= "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–º–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥
        if (abs($analysis['weighted_volume_trend']) > 50) {
            $message .= sprintf(
                "\nüí° –û–±—ä–µ–º—ã %s —Ç—Ä–µ–Ω–¥",
                $analysis['weighted_volume_trend'] > 0 ? "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç" : "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç"
            );
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏
        if ($volCorr['asset_btc'] > 90 || $volCorr['asset_eth'] > 90) {
            $message .= "\nüí´ –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC/ETH";
        }

        return $message;
    }
}
