<?php
/**
 * php artisan trades:check-liquidation
 */

namespace App\Console\Commands\Alerts;

use App\Models\Trade;
use App\Services\TelegramService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Cache;

class CheckLiquidationWarnings extends Command
{
    protected $signature = 'trades:check-liquidation';
    protected $description = '';

    // –£—Ä–æ–≤–Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
    private const WARNING_LEVELS = [
        'CRITICAL' => 5,  // –ö—Ä–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - –º–µ–Ω—å—à–µ 5%
        'WARNING' => 10,  // –ñ–µ–ª—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å - –º–µ–Ω—å—à–µ 10%
        'NOTICE' => 15    // –°–∏–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –º–µ–Ω—å—à–µ 15%
    ];

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    private const int NOTIFICATION_COOLDOWN = 30;

    private TelegramService $telegram;

    public function __construct(TelegramService $telegram)
    {
        parent::__construct();
        $this->telegram = $telegram;
    }

    public function handle()
    {
        $openTrades = Trade::where('status', 'open')->get();

        foreach ($openTrades as $trade) {
            $this->checkTradePosition($trade);
        }
    }

    private function checkTradePosition(Trade $trade)
    {
        $currentPrice = $trade->currency->last_price ?? $trade->entry_price;
        $distanceToLiquidation = $trade->getDistanceToLiquidation($currentPrice);

        if ($distanceToLiquidation === null) {
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        $warningLevel = $this->getWarningLevel($distanceToLiquidation);

        if ($warningLevel) {
            $this->sendWarningIfNeeded($trade, $warningLevel, $distanceToLiquidation);
        }
    }

    private function getWarningLevel(float $distance): ?string
    {
        foreach (self::WARNING_LEVELS as $level => $threshold) {
            if ($distance <= $threshold) {
                return $level;
            }
        }
        return null;
    }

    private function sendWarningIfNeeded(Trade $trade, string $level, float $distance)
    {
        $cacheKey = "liquidation_warning_{$trade->id}_{$level}";

        if (!Cache::has($cacheKey)) {
            $message = $this->formatWarningMessage($trade, $level, $distance);

            if ($this->telegram->sendMessage($message)) {
                Cache::put($cacheKey, true, now()->addMinutes(self::NOTIFICATION_COOLDOWN));
            }
        }
    }

    private function formatWarningMessage(Trade $trade, string $level, float $distance): string
    {
        $emoji = match($level) {
            'CRITICAL' => 'üö®',
            'WARNING' => '‚ö†Ô∏è',
            'NOTICE' => '‚ÑπÔ∏è',
            default => '‚ùó'
        };

        $currentPrice = $trade->currency->last_price ?? $trade->entry_price;
        $liquidationPrice = $trade->getLiquidationPrice();

        $message = "{$emoji} <b>{$level}: –†–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏!</b>\n\n";
        $message .= "üî∏ –ü–∞—Ä–∞: <b>{$trade->currency->name}</b>\n";
        $message .= "üî∏ –¢–∏–ø: " . ($trade->position_type === 'long' ? 'LONG' : 'SHORT') . "\n";
        $message .= "üî∏ –ü–ª–µ—á–æ: {$trade->leverage}x\n\n";

        $message .= "üìä <b>–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:</b>\n";
        $message .= "‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: " . number_format($trade->getAverageEntryPrice(), 8) . "\n";
        $message .= "‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: " . number_format($currentPrice, 8) . "\n";
        $message .= "‚Ä¢ –¶–µ–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: " . number_format($liquidationPrice, 8) . "\n";
        $message .= "‚Ä¢ –î–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏: " . number_format($distance, 2) . "%\n\n";

        $unrealizedPnl = $trade->getUnrealizedPnL($currentPrice);
        $roe = $trade->getCurrentRoe($currentPrice);

        $message .= "üí∞ <b>P&L:</b>\n";
        $message .= "‚Ä¢ PNL: " . number_format($unrealizedPnl, 2) . " USDT\n";
        $message .= "‚Ä¢ ROE: " . number_format($roe, 2) . "%\n\n";

        $message .= "‚ö° <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n";
        $message .= match($level) {
            'CRITICAL' => "‚Ä¢ –°—Ä–æ—á–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –º–∞—Ä–∂—É\n‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä–æ–π—Ç–µ –ø–æ–∑–∏—Ü–∏—é\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å",
            'WARNING' => "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∂–∏\n‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –≤–æ–∑–º–æ–∂–Ω–æ–º—É –∑–∞–∫—Ä—ã—Ç–∏—é",
            'NOTICE' => "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç",
            default => "‚Ä¢ –ü—Ä–∏–º–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ä—ã"
        };

        return $message;
    }
}
